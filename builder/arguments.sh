#!/bin/bash

# Copyright (C) 2022 Y. Orçun GÖKBULUT <orcun.gokbulut@gmail.com>
# All rights reserved. 


ZE_SCRIPT_FILENAME="external-builder.sh"
ZE_BUILD_TYPE="both"
ZE_SOURCE_DIR="$ZE_ROOT_DIR/source"
ZE_BUILD_DIR="$ZE_ROOT_DIR/build"
ZE_OUTPUT_DIR="$ZE_ROOT_DIR/output"
ZE_LOG_ENABLED=1
ZE_LOG_DIR="$ZE_ROOT_DIR/log"
ZE_LOG_FILE=""
ZE_SEPARATE_LOG_FILES=0
ZE_FILTER_MODE="all"
ZE_INCLUDED=()
ZE_EXCLUDED=()
ZE_QUIET=0
ZE_VERBOSE=0
ZE_STOP_ON_ERROR=0
ZE_OPERATION="compile"

function ze_arguments_error()
{
    echo "Command line argument error. $1"
    echo "Please run 'bash $ZE_SCRIPT_FILENAME --help' for more information."
    exit $ZE_FAIL
}

function ze_arguments_usage() 
{
    echo "  Compiles and gathers multiple external dependencies such as libraries, utilities and middlewares which are used by"
    echo "  various projects."
    echo ""
    echo "Usage:"
    echo "  bash $ZE_SCRIPT_FILENAME [ -o | --operating-system <osm name> ]"
    echo "                [ -a | --architecture <arch name> ]"
    echo "                [ -t | --toolchain <toolchain name> ]"
    echo "                [ -b | --build-type <debug | release | both> ]"
    echo "                [ -l | --log-file <log file> ]"
    echo "                [ -s | --separate-log-files ]"
    echo "                [ --output-dir <ouput directory> ]"
    echo "                [ --build-dir <build directory> ]"
    echo "                [ --log-dir <log directory> ]"
    echo "                [[ -i | --include <external name> ]]"
    echo "                [[ -e | --exclude <external name> ]]"
    echo "                [ -S | --stop-on-error ]"
    echo "                [ -q | --quiet ]"
    echo "                [ -v | --verbose ]"
    echo "                [ -h | --help ]"
    echo "                [ --version ]"
    echo "                <operation>"
    echo ""
    echo "Examples:"    
    echo "  bash $ZE_SCRIPT_FILENAME"
    echo "  bash $ZE_SCRIPT_FILENAME clean"
    echo "  bash $ZE_SCRIPT_FILENAME list"
    echo "  bash $ZE_SCRIPT_FILENAME -i gdal"
    echo "  bash $ZE_SCRIPT_FILENAME info -i opencv"
    echo "  bash $ZE_SCRIPT_FILENAME -e Qt5.8 -e gdal -v compile"
    echo "  bash $ZE_SCRIPT_FILENAME -i OpenCL -i mysql -q clean"
    echo "  sudo bash $ZE_SCRIPT_FILENAME -i gdal bootstrap"
    echo ""
    echo "Operations:"
    echo "  build                   Builds, compiles and gathers packages. (Default)"
    echo "  bootstrap               Bootstraps packages by installing their os dependencies. (Ubuntu only, run as root, requires sudo)"
    echo "  clone                   Initializes/fetches pacakge's repositories and submodules from servers."
    echo "  clean                   Deletes temporary and output files generated by configure and compile steps."
    echo "  configure               Configures project parameters and setups project for compilation step."
    echo "  compile                 Compiles project and generates package outputs."
    echo "  gather                  Gathers package's compile output and forms into package structure"
    echo "  generate-info           Generates package information files."
    echo "  generate-registration   Generates registration cmake file for registering package with main project build system."
    echo "  list                    Lists externals."
    echo "  info                    Prints verbose information about externals."
    echo "  full-clean              Deletes all generated or cloned files and directories."
    echo ""
    echo "Options:"
    echo "  -o, --operating-system <os name>    Sets target operating system name."
    echo "                                        Values: See Platforms. (Default: linux)"
    echo "  -a, --architecture <arch name>      Sets target cpu architecture." 
    echo "                                        Values: See Architectures. (Default: x86_64)"
    echo "  -t, --toolchain <compiler name>     Sets target compiler/toolchain."
    echo "                                        Values: See Toolchains. (Default: gcc7)"
    echo "  -b, --build-type <debug | release>  Sets build type. Values: debug, release (Default: release)"
    echo "  --output-dir <directory path>       Sets output directory. (Default: ./Ouput)"
    echo "  --build-dir <directory path>        Sets build directory which will be used for storing intermediate build files. (Default: ./Build)"
    echo "  --log-dir <directory path>          Sets logs directory which will be used for storing build logs. (Default: ./Log)"
    echo "  -l, --log-file <file path>          Explictly sets log file path instead of automaticaly generated one. Cannot be used with"
    echo "                                       --separate-log-file argument. --log-dir will be ignored if this option is given."                                                
    echo "  -s, --separate-log-files            Creates separate log file for each external's operation. Log files will be placed in log directory."
    echo "                                        Cannot be used with --log-file argument."
    echo "  -i, --include <external name>       Marks external as included. Only externals marked as included will be processed if one or more" 
    echo "                                        --include commandline option is given. Can be used multiple times. Cannot be combined with" 
    echo "                                        --exclude commandline option."
    echo "  -e, --exclude <external name>       Marks external as excluded."
    echo "                                        All of the externals except externals marked as excluded will be processed if one or more" 
    echo "                                        --exclude commandline option is given. Can be used multiple times. Cannot be combined with" 
    echo "                                        --include commandline option."
    echo "  -S, --stop-on-error                 Halt and terminate the build if an error occurred (such as on external failed to compile)."
    echo "                                        while processing an external. Default behavior is if an error occured move onto next"
    echo "                                        external and process it."
    echo "  -q, --quiet                         Suppress output messages."
    echo "  -v, --verbose                       Prints internal variables related to build."
    echo "  -h, --help                          Prints this help text."
    echo "  --version                           Prints version information."
    echo ""
    echo "Platforms:"
    echo "  linux"
    echo "  windows"
    echo "  macosx"
    echo "  android"
    echo "  ios"
    echo ""
    echo "Architectures:"
    echo "  x86 x64"
    echo "  arm arm64"
    echo ""
    echo "Toolchains:"
    echo "  gcc7 gcc8 gcc9 gcc10 gcc11"
    echo "  clang5 clang6 clang7 clang8 clang9 clang10 clang11 clang12"
    echo "  msvc110 msvc120 msvc140 msvc141 msvc142 msvc143"
    echo ""
    echo "Notes:"
    echo " * Bootstraping requires root user. Please use sudo when bootstrapping."
    echo " * You have to run bootstrap (By \"$ZE_SCRIPT_FILENAME bootstrap\" command) in order to install build dependencies when"
    echo "   there are update(s) on extenals or if you are building first time on this computer."
    echo " * This is not an cross-platform build tool! Options --operating-system, --architecture and --compiler are only"
    echo "   used for build/output directory structure and logging purporses. Cross-platform building is not supported."
    echo "   Therefore, if you want to build for Linux-armhf-gcc8 run this script on an arm computer (with 32bit armhf chip)"
    echo "   running linux with gcc8 selected as default compiler. Don't expect everthing from the goverment."
    echo ""
}

function ze_arguments_parse()
{
    COMMAND_LINE=$@
    ZE_ARGUMENTS=$(getopt -n "$0" -o o:a:t:b:l:i:e:qvdhsS --long operating-system:,architecture:,toolchain:,build-type:,output-dir:,build-dir:,log-dir:,log-file:,separate-log-files,include:,exclude:,quiet,verbose,version,help,stop-on-error -- "$@")
    if [ $? != 0 ] ; then
        ze_arguments_error "Cannot parse commandline arguments."
    fi

    eval set -- "$ZE_ARGUMENTS"
    while true ; do
        case "$1" in
            -o | --operating-system) ZE_PLATFORM="$2" ; shift 2 ;;
            -a | --architecture) ZE_ARCHITECTURE="$2" ; shift 2 ;;
            -t | --toolchain) ZE_TOOLCHAIN="$2" ; shift 2 ;;
            -b | --build-type) ZE_BUILD_TYPE="$2" ; shift 2 ;;
            --output-dir) ZE_OUTPUT_DIR="$2" ; shift 2 ;;
            --build-dir) ZE_BUILD_DIR="$2" ; shift 2 ;;
            --log-dir) ZE_LOG_DIR="$2" ; shift 2 ;;
            -l | --log-file) ZE_LOG_FILE="$2" ; shift 2 ;;
            -s | --separate-log-files) ZE_SEPARATE_LOG_FILES=1 ; shift 1 ;;
            -i | --include) ZE_INCLUDED+=("$2") ; shift 2 ;;
            -e | --exclude) ZE_EXCLUDED+=("$2") ; shift 2 ;;
            -q | --quiet) ZE_QUIET=1 ; shift 1 ;;
            -v | --verbose) ZE_VERBOSE=1 ; shift 1 ;;
            -h | --help) ze_arguments_usage ; exit $ZE_SUCCESS ;;
            -S | --stop-on-error) ZE_STOP_ON_ERROR=1 ; shift 1 ;;
            --version) echo "0.1" ; exit $ZE_SUCCESS ;;
            --) shift ; break ;;
            *) 
                ze_arguments_error "Unknwon option: \"$1\"."
                shift 1 
                ;;
        esac
    done

    ZE_OPERATION="$@"

    if [[ "$ZE_BUILD_TYPE" != "release" ]] && [[ "$ZE_BUILD_TYPE" != "debug" ]] && [[ "$ZE_BUILD_TYPE" != "both" ]]; then
        ze_arguments_error "Unknown build type. Expected: debug or release got \"$ZE_BUILD_TYPE\"."
    fi

    if [[ ${#ZE_INCLUDED[@]} -gt 0 ]] && [[ ${#ZE_EXCLUDED[@]} -gt 0 ]]; then
        ze_arguments_error "--include and --exclude options cannot be used at the same time."
    fi

    if [[ ${#ZE_INCLUDED[@]} -gt 0 ]]; then
        ZE_FILTER_MODE=INCLUDE
    elif [[ ${#ZE_EXCLUDED[@]} -gt 0 ]]; then
        ZE_FILTER_MODE=EXCLUDE
    else
        ZE_FILTER_MODE=ALL
    fi

    if [[ $ZE_SEPARATE_LOG_FILES -ne 0 ]] && [[ "$ZE_LOG_FILER" != "" ]]; then
        ze_arguments_error "--seperate-log-files and --log-file options cannot be used at the same time."
    fi

    if [[ "$ZE_OPERATION" != "build" ]] && 
        [[ "$ZE_OPERATION" != "bootstrap" ]] && 
        [[ "$ZE_OPERATION" != "clone" ]] && 
        [[ "$ZE_OPERATION" != "clean" ]] &&
        [[ "$ZE_OPERATION" != "configure" ]] &&
        [[ "$ZE_OPERATION" != "compile" ]] &&
        [[ "$ZE_OPERATION" != "gather" ]] &&
        [[ "$ZE_OPERATION" != "generate-info" ]] &&
        [[ "$ZE_OPERATION" != "generate-registration" ]] &&
        [[ "$ZE_OPERATION" != "list" ]] &&
        [[ "$ZE_OPERATION" != "info" ]] &&
        [[ "$ZE_OPERATION" != "full-clean" ]] &&
        [[ "$ZE_OPERATION" != "none" ]] &&
        [[ "$ZE_OPERATION" != "" ]]; then
        ze_arguments_error "Unknown operation: \"$ZE_OPERATION\"."
    fi

    if [[ "$ZE_OPERATION" = "" ]]; then
        ZE_OPERATION="build"
    fi

    if [[ "$ZE_OPERATION" = "bootstrap" ]] && [[ "$EUID" -ne 0 ]]; then
        ze_arguments_error "Bootstrap operation requires root permissions. Run 'sudo $COMMAND_LINE'."
    elif [[ "$ZE_OPERATION" != "bootstrap" ]] && [[ "$EUID" -eq 0 ]]; then
        echo ""
        echo "!!!! WARNING !!!!"
        echo ""       
        echo "You are running as root user. You should only run this script as root while you are bootstraping."
        echo ""       
        echo "This can cause issues in your system if one of the build scripts behaves incorrectly. For example; a buggy external build script can install into your systems /usr/local directory and overwrite files on the system instead of the output directory given by the build system. UPPS!"
        echo ""
        echo ""
    fi

    ZE_PLATFORM="$ZE_OPERATING_SYSTEM-$ZE_ARCHITECTURE-$ZE_TOOLCHAIN-$ZE_BUILD_TYPE"

    # Normalize Paths
    ZE_BUILD_DIR=$(realpath -m "$ZE_BUILD_DIR")
    ZE_OUTPUT_DIR=$(realpath -m "$ZE_OUTPUT_DIR")
    ZE_LOG_DIR=$(realpath -m "$ZE_LOG_DIR")
}
